using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace BookstoreManagementDAL
{
	/// <summary>
	/// Strongly-typed collection for the TblBook class.
	/// </summary>
    [Serializable]
	public partial class TblBookCollection : ActiveList<TblBook, TblBookCollection>
	{	   
		public TblBookCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TblBookCollection</returns>
		public TblBookCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TblBook o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the TblBook table.
	/// </summary>
	[Serializable]
	public partial class TblBook : ActiveRecord<TblBook>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TblBook()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TblBook(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TblBook(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TblBook(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("TblBook", TableType.Table, DataService.GetInstance("DefaultConnection"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Guid;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = false;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				
						colvarId.DefaultSetting = @"(newid())";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarIsbn = new TableSchema.TableColumn(schema);
				colvarIsbn.ColumnName = "ISBN";
				colvarIsbn.DataType = DbType.AnsiString;
				colvarIsbn.MaxLength = 15;
				colvarIsbn.AutoIncrement = false;
				colvarIsbn.IsNullable = false;
				colvarIsbn.IsPrimaryKey = false;
				colvarIsbn.IsForeignKey = false;
				colvarIsbn.IsReadOnly = false;
				
						colvarIsbn.DefaultSetting = @"('')";
				colvarIsbn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsbn);
				
				TableSchema.TableColumn colvarTitle = new TableSchema.TableColumn(schema);
				colvarTitle.ColumnName = "Title";
				colvarTitle.DataType = DbType.String;
				colvarTitle.MaxLength = 256;
				colvarTitle.AutoIncrement = false;
				colvarTitle.IsNullable = false;
				colvarTitle.IsPrimaryKey = false;
				colvarTitle.IsForeignKey = false;
				colvarTitle.IsReadOnly = false;
				
						colvarTitle.DefaultSetting = @"('')";
				colvarTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTitle);
				
				TableSchema.TableColumn colvarPriceInput = new TableSchema.TableColumn(schema);
				colvarPriceInput.ColumnName = "PriceInput";
				colvarPriceInput.DataType = DbType.Decimal;
				colvarPriceInput.MaxLength = 0;
				colvarPriceInput.AutoIncrement = false;
				colvarPriceInput.IsNullable = false;
				colvarPriceInput.IsPrimaryKey = false;
				colvarPriceInput.IsForeignKey = false;
				colvarPriceInput.IsReadOnly = false;
				
						colvarPriceInput.DefaultSetting = @"((0))";
				colvarPriceInput.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceInput);
				
				TableSchema.TableColumn colvarPriceOutput = new TableSchema.TableColumn(schema);
				colvarPriceOutput.ColumnName = "PriceOutput";
				colvarPriceOutput.DataType = DbType.Decimal;
				colvarPriceOutput.MaxLength = 0;
				colvarPriceOutput.AutoIncrement = false;
				colvarPriceOutput.IsNullable = false;
				colvarPriceOutput.IsPrimaryKey = false;
				colvarPriceOutput.IsForeignKey = false;
				colvarPriceOutput.IsReadOnly = false;
				
						colvarPriceOutput.DefaultSetting = @"((0))";
				colvarPriceOutput.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPriceOutput);
				
				TableSchema.TableColumn colvarDescription = new TableSchema.TableColumn(schema);
				colvarDescription.ColumnName = "Description";
				colvarDescription.DataType = DbType.String;
				colvarDescription.MaxLength = 256;
				colvarDescription.AutoIncrement = false;
				colvarDescription.IsNullable = false;
				colvarDescription.IsPrimaryKey = false;
				colvarDescription.IsForeignKey = false;
				colvarDescription.IsReadOnly = false;
				
						colvarDescription.DefaultSetting = @"('')";
				colvarDescription.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDescription);
				
				TableSchema.TableColumn colvarImage = new TableSchema.TableColumn(schema);
				colvarImage.ColumnName = "Image";
				colvarImage.DataType = DbType.String;
				colvarImage.MaxLength = 256;
				colvarImage.AutoIncrement = false;
				colvarImage.IsNullable = false;
				colvarImage.IsPrimaryKey = false;
				colvarImage.IsForeignKey = false;
				colvarImage.IsReadOnly = false;
				
						colvarImage.DefaultSetting = @"('')";
				colvarImage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImage);
				
				TableSchema.TableColumn colvarQuantity = new TableSchema.TableColumn(schema);
				colvarQuantity.ColumnName = "Quantity";
				colvarQuantity.DataType = DbType.Int32;
				colvarQuantity.MaxLength = 0;
				colvarQuantity.AutoIncrement = false;
				colvarQuantity.IsNullable = false;
				colvarQuantity.IsPrimaryKey = false;
				colvarQuantity.IsForeignKey = false;
				colvarQuantity.IsReadOnly = false;
				
						colvarQuantity.DefaultSetting = @"((0))";
				colvarQuantity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarQuantity);
				
				TableSchema.TableColumn colvarIsActivated = new TableSchema.TableColumn(schema);
				colvarIsActivated.ColumnName = "IsActivated";
				colvarIsActivated.DataType = DbType.Boolean;
				colvarIsActivated.MaxLength = 0;
				colvarIsActivated.AutoIncrement = false;
				colvarIsActivated.IsNullable = false;
				colvarIsActivated.IsPrimaryKey = false;
				colvarIsActivated.IsForeignKey = false;
				colvarIsActivated.IsReadOnly = false;
				
						colvarIsActivated.DefaultSetting = @"((1))";
				colvarIsActivated.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsActivated);
				
				TableSchema.TableColumn colvarIsDeleted = new TableSchema.TableColumn(schema);
				colvarIsDeleted.ColumnName = "IsDeleted";
				colvarIsDeleted.DataType = DbType.Boolean;
				colvarIsDeleted.MaxLength = 0;
				colvarIsDeleted.AutoIncrement = false;
				colvarIsDeleted.IsNullable = false;
				colvarIsDeleted.IsPrimaryKey = false;
				colvarIsDeleted.IsForeignKey = false;
				colvarIsDeleted.IsReadOnly = false;
				
						colvarIsDeleted.DefaultSetting = @"((0))";
				colvarIsDeleted.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsDeleted);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.AnsiString;
				colvarCreatedBy.MaxLength = 256;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = false;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				
						colvarCreatedBy.DefaultSetting = @"('')";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarCreatedAt = new TableSchema.TableColumn(schema);
				colvarCreatedAt.ColumnName = "CreatedAt";
				colvarCreatedAt.DataType = DbType.DateTime;
				colvarCreatedAt.MaxLength = 0;
				colvarCreatedAt.AutoIncrement = false;
				colvarCreatedAt.IsNullable = false;
				colvarCreatedAt.IsPrimaryKey = false;
				colvarCreatedAt.IsForeignKey = false;
				colvarCreatedAt.IsReadOnly = false;
				
						colvarCreatedAt.DefaultSetting = @"(getdate())";
				colvarCreatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedAt);
				
				TableSchema.TableColumn colvarUpdatedBy = new TableSchema.TableColumn(schema);
				colvarUpdatedBy.ColumnName = "UpdatedBy";
				colvarUpdatedBy.DataType = DbType.AnsiString;
				colvarUpdatedBy.MaxLength = 256;
				colvarUpdatedBy.AutoIncrement = false;
				colvarUpdatedBy.IsNullable = false;
				colvarUpdatedBy.IsPrimaryKey = false;
				colvarUpdatedBy.IsForeignKey = false;
				colvarUpdatedBy.IsReadOnly = false;
				
						colvarUpdatedBy.DefaultSetting = @"('')";
				colvarUpdatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedBy);
				
				TableSchema.TableColumn colvarUpdatedAt = new TableSchema.TableColumn(schema);
				colvarUpdatedAt.ColumnName = "UpdatedAt";
				colvarUpdatedAt.DataType = DbType.DateTime;
				colvarUpdatedAt.MaxLength = 0;
				colvarUpdatedAt.AutoIncrement = false;
				colvarUpdatedAt.IsNullable = false;
				colvarUpdatedAt.IsPrimaryKey = false;
				colvarUpdatedAt.IsForeignKey = false;
				colvarUpdatedAt.IsReadOnly = false;
				
						colvarUpdatedAt.DefaultSetting = @"(getdate())";
				colvarUpdatedAt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdatedAt);
				
				TableSchema.TableColumn colvarPublisherId = new TableSchema.TableColumn(schema);
				colvarPublisherId.ColumnName = "PublisherId";
				colvarPublisherId.DataType = DbType.Guid;
				colvarPublisherId.MaxLength = 0;
				colvarPublisherId.AutoIncrement = false;
				colvarPublisherId.IsNullable = false;
				colvarPublisherId.IsPrimaryKey = false;
				colvarPublisherId.IsForeignKey = true;
				colvarPublisherId.IsReadOnly = false;
				colvarPublisherId.DefaultSetting = @"";
				
					colvarPublisherId.ForeignKeyTableName = "TblPublisher";
				schema.Columns.Add(colvarPublisherId);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["DefaultConnection"].AddSchema("TblBook",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public Guid Id 
		{
			get { return GetColumnValue<Guid>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Isbn")]
		[Bindable(true)]
		public string Isbn 
		{
			get { return GetColumnValue<string>(Columns.Isbn); }
			set { SetColumnValue(Columns.Isbn, value); }
		}
		  
		[XmlAttribute("Title")]
		[Bindable(true)]
		public string Title 
		{
			get { return GetColumnValue<string>(Columns.Title); }
			set { SetColumnValue(Columns.Title, value); }
		}
		  
		[XmlAttribute("PriceInput")]
		[Bindable(true)]
		public decimal PriceInput 
		{
			get { return GetColumnValue<decimal>(Columns.PriceInput); }
			set { SetColumnValue(Columns.PriceInput, value); }
		}
		  
		[XmlAttribute("PriceOutput")]
		[Bindable(true)]
		public decimal PriceOutput 
		{
			get { return GetColumnValue<decimal>(Columns.PriceOutput); }
			set { SetColumnValue(Columns.PriceOutput, value); }
		}
		  
		[XmlAttribute("Description")]
		[Bindable(true)]
		public string Description 
		{
			get { return GetColumnValue<string>(Columns.Description); }
			set { SetColumnValue(Columns.Description, value); }
		}
		  
		[XmlAttribute("Image")]
		[Bindable(true)]
		public string Image 
		{
			get { return GetColumnValue<string>(Columns.Image); }
			set { SetColumnValue(Columns.Image, value); }
		}
		  
		[XmlAttribute("Quantity")]
		[Bindable(true)]
		public int Quantity 
		{
			get { return GetColumnValue<int>(Columns.Quantity); }
			set { SetColumnValue(Columns.Quantity, value); }
		}
		  
		[XmlAttribute("IsActivated")]
		[Bindable(true)]
		public bool IsActivated 
		{
			get { return GetColumnValue<bool>(Columns.IsActivated); }
			set { SetColumnValue(Columns.IsActivated, value); }
		}
		  
		[XmlAttribute("IsDeleted")]
		[Bindable(true)]
		public bool IsDeleted 
		{
			get { return GetColumnValue<bool>(Columns.IsDeleted); }
			set { SetColumnValue(Columns.IsDeleted, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("CreatedAt")]
		[Bindable(true)]
		public DateTime CreatedAt 
		{
			get { return GetColumnValue<DateTime>(Columns.CreatedAt); }
			set { SetColumnValue(Columns.CreatedAt, value); }
		}
		  
		[XmlAttribute("UpdatedBy")]
		[Bindable(true)]
		public string UpdatedBy 
		{
			get { return GetColumnValue<string>(Columns.UpdatedBy); }
			set { SetColumnValue(Columns.UpdatedBy, value); }
		}
		  
		[XmlAttribute("UpdatedAt")]
		[Bindable(true)]
		public DateTime UpdatedAt 
		{
			get { return GetColumnValue<DateTime>(Columns.UpdatedAt); }
			set { SetColumnValue(Columns.UpdatedAt, value); }
		}
		  
		[XmlAttribute("PublisherId")]
		[Bindable(true)]
		public Guid PublisherId 
		{
			get { return GetColumnValue<Guid>(Columns.PublisherId); }
			set { SetColumnValue(Columns.PublisherId, value); }
		}
		
		#endregion
		
		
		#region PrimaryKey Methods		
		
        protected override void SetPrimaryKey(object oValue)
        {
            base.SetPrimaryKey(oValue);
            
            SetPKValues();
        }
        
		
		public BookstoreManagementDAL.TblBookAuthorCollection TblBookAuthorRecords()
		{
			return new BookstoreManagementDAL.TblBookAuthorCollection().Where(TblBookAuthor.Columns.BookId, Id).Load();
		}
		public BookstoreManagementDAL.TblBookCategoryCollection TblBookCategoryRecords()
		{
			return new BookstoreManagementDAL.TblBookCategoryCollection().Where(TblBookCategory.Columns.BookId, Id).Load();
		}
		public BookstoreManagementDAL.TblOrderDetailCollection TblOrderDetailRecords()
		{
			return new BookstoreManagementDAL.TblOrderDetailCollection().Where(TblOrderDetail.Columns.BookId, Id).Load();
		}
		#endregion
		
			
		
		#region ForeignKey Properties
		
		/// <summary>
		/// Returns a TblPublisher ActiveRecord object related to this TblBook
		/// 
		/// </summary>
		public BookstoreManagementDAL.TblPublisher TblPublisher
		{
			get { return BookstoreManagementDAL.TblPublisher.FetchByID(this.PublisherId); }
			set { SetColumnValue("PublisherId", value.Id); }
		}
		
		
		#endregion
		
		
		
		#region Many To Many Helpers
		
		 
		public BookstoreManagementDAL.TblAuthorCollection GetTblAuthorCollection() { return TblBook.GetTblAuthorCollection(this.Id); }
		public static BookstoreManagementDAL.TblAuthorCollection GetTblAuthorCollection(Guid varId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[TblAuthor] INNER JOIN [TblBookAuthor] ON [TblAuthor].[Id] = [TblBookAuthor].[AuthorId] WHERE [TblBookAuthor].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmd.AddParameter("@BookId", varId, DbType.Guid);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TblAuthorCollection coll = new TblAuthorCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTblAuthorMap(Guid varId, TblAuthorCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookAuthor] WHERE [TblBookAuthor].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TblAuthor item in items)
			{
				TblBookAuthor varTblBookAuthor = new TblBookAuthor();
				varTblBookAuthor.SetColumnValue("BookId", varId);
				varTblBookAuthor.SetColumnValue("AuthorId", item.GetPrimaryKeyValue());
				varTblBookAuthor.Save();
			}
		}
		public static void SaveTblAuthorMap(Guid varId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookAuthor] WHERE [TblBookAuthor].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					TblBookAuthor varTblBookAuthor = new TblBookAuthor();
					varTblBookAuthor.SetColumnValue("BookId", varId);
					varTblBookAuthor.SetColumnValue("AuthorId", l.Value);
					varTblBookAuthor.Save();
				}
			}
		}
		public static void SaveTblAuthorMap(Guid varId , Guid[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookAuthor] WHERE [TblBookAuthor].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (Guid item in itemList) 
			{
				TblBookAuthor varTblBookAuthor = new TblBookAuthor();
				varTblBookAuthor.SetColumnValue("BookId", varId);
				varTblBookAuthor.SetColumnValue("AuthorId", item);
				varTblBookAuthor.Save();
			}
		}
		
		public static void DeleteTblAuthorMap(Guid varId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookAuthor] WHERE [TblBookAuthor].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			DataService.ExecuteQuery(cmdDel);
		}
		
		 
		public BookstoreManagementDAL.TblCategoryCollection GetTblCategoryCollection() { return TblBook.GetTblCategoryCollection(this.Id); }
		public static BookstoreManagementDAL.TblCategoryCollection GetTblCategoryCollection(Guid varId)
		{
		    SubSonic.QueryCommand cmd = new SubSonic.QueryCommand("SELECT * FROM [dbo].[TblCategory] INNER JOIN [TblBookCategory] ON [TblCategory].[Id] = [TblBookCategory].[CategoryId] WHERE [TblBookCategory].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmd.AddParameter("@BookId", varId, DbType.Guid);
			IDataReader rdr = SubSonic.DataService.GetReader(cmd);
			TblCategoryCollection coll = new TblCategoryCollection();
			coll.LoadAndCloseReader(rdr);
			return coll;
		}
		
		public static void SaveTblCategoryMap(Guid varId, TblCategoryCollection items)
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookCategory] WHERE [TblBookCategory].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (TblCategory item in items)
			{
				TblBookCategory varTblBookCategory = new TblBookCategory();
				varTblBookCategory.SetColumnValue("BookId", varId);
				varTblBookCategory.SetColumnValue("CategoryId", item.GetPrimaryKeyValue());
				varTblBookCategory.Save();
			}
		}
		public static void SaveTblCategoryMap(Guid varId, System.Web.UI.WebControls.ListItemCollection itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookCategory] WHERE [TblBookCategory].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (System.Web.UI.WebControls.ListItem l in itemList) 
			{
				if (l.Selected) 
				{
					TblBookCategory varTblBookCategory = new TblBookCategory();
					varTblBookCategory.SetColumnValue("BookId", varId);
					varTblBookCategory.SetColumnValue("CategoryId", l.Value);
					varTblBookCategory.Save();
				}
			}
		}
		public static void SaveTblCategoryMap(Guid varId , Guid[] itemList) 
		{
			QueryCommandCollection coll = new SubSonic.QueryCommandCollection();
			//delete out the existing
			 QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookCategory] WHERE [TblBookCategory].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			coll.Add(cmdDel);
			DataService.ExecuteTransaction(coll);
			foreach (Guid item in itemList) 
			{
				TblBookCategory varTblBookCategory = new TblBookCategory();
				varTblBookCategory.SetColumnValue("BookId", varId);
				varTblBookCategory.SetColumnValue("CategoryId", item);
				varTblBookCategory.Save();
			}
		}
		
		public static void DeleteTblCategoryMap(Guid varId) 
		{
			QueryCommand cmdDel = new QueryCommand("DELETE FROM [TblBookCategory] WHERE [TblBookCategory].[BookId] = @BookId", TblBook.Schema.Provider.Name);
			cmdDel.AddParameter("@BookId", varId, DbType.Guid);
			DataService.ExecuteQuery(cmdDel);
		}
		
		#endregion
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(Guid varId,string varIsbn,string varTitle,decimal varPriceInput,decimal varPriceOutput,string varDescription,string varImage,int varQuantity,bool varIsActivated,bool varIsDeleted,string varCreatedBy,DateTime varCreatedAt,string varUpdatedBy,DateTime varUpdatedAt,Guid varPublisherId)
		{
			TblBook item = new TblBook();
			
			item.Id = varId;
			
			item.Isbn = varIsbn;
			
			item.Title = varTitle;
			
			item.PriceInput = varPriceInput;
			
			item.PriceOutput = varPriceOutput;
			
			item.Description = varDescription;
			
			item.Image = varImage;
			
			item.Quantity = varQuantity;
			
			item.IsActivated = varIsActivated;
			
			item.IsDeleted = varIsDeleted;
			
			item.CreatedBy = varCreatedBy;
			
			item.CreatedAt = varCreatedAt;
			
			item.UpdatedBy = varUpdatedBy;
			
			item.UpdatedAt = varUpdatedAt;
			
			item.PublisherId = varPublisherId;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}

        public static void Insert(TblBook item)
        {
            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }


        /// <summary>
        /// Updates a record, can be used with the Object Data Source
        /// </summary>
        public static void Update(Guid varId,string varIsbn,string varTitle,decimal varPriceInput,decimal varPriceOutput,string varDescription,string varImage,int varQuantity,bool varIsActivated,bool varIsDeleted,string varCreatedBy,DateTime varCreatedAt,string varUpdatedBy,DateTime varUpdatedAt,Guid varPublisherId)
		{
			TblBook item = new TblBook();
			
				item.Id = varId;
			
				item.Isbn = varIsbn;
			
				item.Title = varTitle;
			
				item.PriceInput = varPriceInput;
			
				item.PriceOutput = varPriceOutput;
			
				item.Description = varDescription;
			
				item.Image = varImage;
			
				item.Quantity = varQuantity;
			
				item.IsActivated = varIsActivated;
			
				item.IsDeleted = varIsDeleted;
			
				item.CreatedBy = varCreatedBy;
			
				item.CreatedAt = varCreatedAt;
			
				item.UpdatedBy = varUpdatedBy;
			
				item.UpdatedAt = varUpdatedAt;
			
				item.PublisherId = varPublisherId;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}

        public static void Update(TblBook item)
        {
            item.IsNew = false;

            if (System.Web.HttpContext.Current != null)
                item.Save(System.Web.HttpContext.Current.User.Identity.Name);
            else
                item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
        }
        #endregion



        #region Typed Columns


        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IsbnColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TitleColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceInputColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PriceOutputColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DescriptionColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn QuantityColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsActivatedColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn IsDeletedColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedAtColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedByColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdatedAtColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn PublisherIdColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Isbn = @"ISBN";
			 public static string Title = @"Title";
			 public static string PriceInput = @"PriceInput";
			 public static string PriceOutput = @"PriceOutput";
			 public static string Description = @"Description";
			 public static string Image = @"Image";
			 public static string Quantity = @"Quantity";
			 public static string IsActivated = @"IsActivated";
			 public static string IsDeleted = @"IsDeleted";
			 public static string CreatedBy = @"CreatedBy";
			 public static string CreatedAt = @"CreatedAt";
			 public static string UpdatedBy = @"UpdatedBy";
			 public static string UpdatedAt = @"UpdatedAt";
			 public static string PublisherId = @"PublisherId";
						
		}
		#endregion
		
		#region Update PK Collections
		
        public void SetPKValues()
        {
}
        #endregion
    
        #region Deep Save
		
        public void DeepSave()
        {
            Save();
            
}
        #endregion
	}
}
